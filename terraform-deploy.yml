# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-22.04'

variables:
- group: secureline-secrets
- name: TerraformConfigPath
  value: 'terraform'
  

stages:
  - stage: Initialize
    jobs:
      - job: SourceAction
        steps:
          - checkout: self
            clean: true
            path: s/MyAppSourceArtifact
          - script: echo "Source code has been checked out."
            displayName: 'Check out source code'

  - stage: ApplyTerraform
    dependsOn: Initialize
    jobs:
      - job: ApplyTerraform
        steps:
          - script: |
              az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
              az account set --subscription $(subscriptionid)
              cd $(TerraformConfigPath)
              terraform init

              # Run plan with detailed exit code and variables
              terraform plan -out=tfplan -detailed-exitcode \
                -var="client_id=$(clientid)" \
                -var="tenant_id=$(tenantid)" \
                -var="subscription_id=$(subscriptionid)" \
                -var="client_secret=$(clientsecret)"

              # Store the exit code
              PLAN_EXIT_CODE=$?
              
              # Only apply if changes were detected (exit code 2)
              if [ $PLAN_EXIT_CODE -eq 2 ]; then
                echo "Changes detected, applying..."
                terraform apply -auto-approve tfplan
              else
                echo "No changes detected. Skipping apply."
              fi
            displayName: 'Apply Terraform Configuration'
