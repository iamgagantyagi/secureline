# Azure DevOps Secureline Pipeline YAML
trigger:
  none

resources:
  pipelines:
    - pipeline: terraformPipeline
      source: terraform-deploy
      trigger:
        branches:
          include:
            - main

pool:
  name: Default
  demands: agent.name -equals securelinedemo

variables:
- group: secureline-secret
- name: GitHubRepoURL
  value: 'https://github.com/iamgagantyagi/WebGoat'
- name: GitHubRepoOwner
  value: 'iamgagantyagi'
- name: GitHubRepoName
  value: 'WebGoat'
- name: GitHubBranch
  value: 'main'
- name: ArtifactStorageAccount
  value: 'securelinestorage'
- name: ArtifactContainerName
  value: 'securelineartifacts'
- name: GVM_USER
  value: 'admin'
- name: GVM_PASSWORD
  value: 'Admin1234!'
- name: TARGET_NAME
  value: 'secureline-target'
- name: TASK_NAME
  value: 'secureline-vunerability-scan'
- name: SCAN_TIMEOUT
  value: '600'

stages:
  - stage: Initialize
    jobs:
      - job: SourceAction
        steps:
          - checkout: self
            clean: true
            path: s/MyAppSourceArtifact
          - script: echo "Source code has been checked out"
            displayName: 'Check out source code'

  - stage: SecretsScanner
    dependsOn: Initialize
    jobs:
      - job: SecretsScanner
        steps:
          - script: |
              echo "Checking if trufflehog3 is already installed..."
              if pip list 2>/dev/null | grep -q trufflehog3; then
                echo "trufflehog3 is already installed, skipping installation"
              else
                echo "Installing dependencies for Secret Scanning"
                pip install trufflehog3
              fi
            displayName: 'Install Secret Scanning dependencies' 
          - script: |
              echo "Started scanning code repositories for vulnerabilities related to secret keys."
              /home/ubuntu/.local/bin/trufflehog3 $(GitHubRepoURL) --no-history -f json -o truffelhog_output.json || true
              echo "Scanning completed."
            displayName: 'Run Trufflehog3 Scan'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload --file truffelhog_output.json --container-name $(ArtifactContainerName) --name securelinescanoutput/truffelhog_output.json --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Upload Trufflehog3 Scan Results'

          - script: |
              echo "Sending SonarQube security findings to DefectDojo"
              curl -X POST "http://$(DefectDojoDomain):30001/api/v2/import-scan/" \
              -H "accept: application/json" \
              -H "Authorization: Token $(defectdojotoken)" \
              -H "Content-Type: multipart/form-data" \
              -F "active=true" \
              -F "verified=true" \
              -F "close_old_findings=false" \
              -F "test_title=Secureline" \
              -F "push_to_jira=false" \
              -F "minimum_severity=Info" \
              -F "close_old_findings_product_scope=false" \
              -F "scan_date=$(date +%F)" \
              -F "create_finding_groups_for_all_findings=true" \
              -F "tags=Secureline" \
              -F "scan_type=Trufflehog3 Scan" \
              -F "file=@truffelhog_output.json" \
              -F "engagement=1"
              if [ $? -eq 0 ]; then echo -e "\nReport sent successfully"; else echo -e "\nFailed to send report"; fi
            displayName: 'Send Trufflehog3 Results to DefectDojo' 
          
  - stage: SourceCompositionAnalysis
    jobs:
      - job: SourceCompositionAnalysis
        steps:
          - script: |
              echo "Checking if Dependency Check is already installed..."
              if [ -d "/home/ubuntu/dependency-check" ] && [ -f "/home/ubuntu/dependency-check/bin/dependency-check.sh" ]; then
                echo "Dependency Check is already installed, skipping installation"
              else
                echo "Installing dependencies for Source Composition Analysis"
                cd /home/ubuntu/
                mkdir dependency-check-results
                rm -rf dependency-check
                wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.3/dependency-check-10.0.3-release.zip
                unzip -o dependency-check-10.0.3-release.zip
                rm -rf dependency-check-10.0.3-release.zip
                chmod -R 775 dependency-check/bin/dependency-check.sh
                echo 'export PATH=/home/ubuntu/dependency-check/bin:$PATH' >> ~/.bashrc
                source ~/.bashrc 
              fi
            displayName: 'Install Source Composition Analysis dependencies'
          - script: |
              export PATH=/home/ubuntu/dependency-check/bin:$PATH
              echo "Started scanning to detect publicly disclosed vulnerabilities contained within project's dependencies"          
              git clone https://github.com/iamgagantyagi/WebGoat.git $HOME/WebGoat
              dependency-check.sh -o '/home/ubuntu/dependency-check-results/' -s '/home/ubuntu/WebGoat' -f 'ALL' --prettyPrint
              echo "Scanning completed."
            displayName: 'Run Dependency Check'  
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload --file /home/ubuntu/dependency-check-results/dependency-check-report.xml --container-name $(ArtifactContainerName) --name securelinescanoutput/dependency-check-report.xml --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Upload Dependency Check Results'

          - script: |
              echo "Sending SonarQube security findings to DefectDojo"
              curl -X POST "http://$(DefectDojoDomain):30001/api/v2/import-scan/" \
              -H "accept: application/json" \
              -H "Authorization: Token $(defectdojotoken)" \
              -H "Content-Type: multipart/form-data" \
              -F "active=true" \
              -F "verified=true" \
              -F "close_old_findings=false" \
              -F "test_title=Secureline" \
              -F "push_to_jira=false" \
              -F "minimum_severity=Info" \
              -F "close_old_findings_product_scope=false" \
              -F "scan_date=$(date +%F)" \
              -F "create_finding_groups_for_all_findings=true" \
              -F "tags=Secureline" \
              -F "scan_type=Dependency Check Scan" \
              -F "file=@dependency-check-report.xml;type=text/xml" \
              -F "engagement=1"
              if [ $? -eq 0 ]; then echo -e "\nReport sent successfully"; else echo -e "\nFailed to send report"; fi
            displayName: 'Send SCA result to DefectDojo' 

  - stage: StaticApplicationSecurityTesting
    jobs:
      - job: StaticApplicationSecurityTesting
        steps:
          - script: |
              echo "Checking if Sonar Scanner is already installed..."
              if [ -d "/opt/sonar-scanner" ] && [ -f "/opt/sonar-scanner/bin/sonar-scanner" ]; then
                echo "Sonar Scanner is already installed, skipping installation"
              else
                echo "Installing dependencies for Static Application Security Testing (SAST)"
                cd /home/ubuntu/
                # Check if maven is installed
                if ! command -v mvn &> /dev/null; then
                  sudo apt install -y maven
                else
                  echo "Maven is already installed, skipping installation"
                fi
                
                rm -rf sonar-scanner-cli-7.1.0.4889-linux-x64
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.1.0.4889-linux-x64.zip
                unzip sonar-scanner-cli-7.1.0.4889-linux-x64.zip
                rm -rf sonar-scanner-cli-7.1.0.4889-linux-x64.zip
                sudo mv sonar-scanner-cli-7.1.0.4889-linux-x64 /opt/sonar-scanner
                chmod -R 775 /opt/sonar-scanner
              fi
            displayName: 'Install SAST dependencies'

          - script: |
              echo "Cloning the repository"
              git clone https://github.com/iamgagantyagi/WebGoat.git
              sudo apt install maven -y
            displayName: 'Clone Repository'

          - script: |
              echo "Started scanning for Static Application Security Testing (SAST)"
              cd $HOME/WebGoat
              sudo mvn sonar:sonar -Dsonar.host.url="http://$(DefectDojoDomain):30000" -Dsonar.java.binaries="$HOME/WebGoat/src/main/java" -Dsonar.token="$(Sonartoken)" -Dsonar.projectKey="SecureLine" -e
              echo "Scanning completed."
              echo "Generating SonarQube report..."
              cd /home/ubuntu/
              curl -u "$(Sonartoken):" "http://$(DefectDojoDomain):30000/api/issues/search?componentKeys=securityproject" -o sonar-report.json
            displayName: 'Run SonarQube and store Scan'

          - script: |
              echo "Sending SonarQube security findings to DefectDojo"
              curl -X POST "http://$(DefectDojoDomain):30001/api/v2/import-scan/" \
              -H "accept: application/json" \
              -H "Authorization: Token $(defectdojotoken)" \
              -H "Content-Type: multipart/form-data" \
              -F "active=true" \
              -F "verified=true" \
              -F "close_old_findings=false" \
              -F "test_title=Secureline" \
              -F "push_to_jira=false" \
              -F "minimum_severity=Info" \
              -F "close_old_findings_product_scope=false" \
              -F "scan_date=$(date +%F)" \
              -F "create_finding_groups_for_all_findings=true" \
              -F "tags=Secureline" \
              -F "scan_type=SonarQube API Import" \
              -F "engagement=1"
              if [ $? -eq 0 ]; then echo -e "\nReport sent successfully"; else echo -e "\nFailed to send report"; fi
            displayName: 'Send SonarQube Results to DefectDojo'
  
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload --file /home/ubuntu/sonar-report.json --container-name $(ArtifactContainerName) --name securelinescanoutput/sonar-report.json --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Upload SonarQube Scan Results' 

  - stage: KubescapeStaticScan
    jobs:
      - job: KubescapeStaticScan
        steps:
          - script: |
              echo "Checking if Kubescape is already installed..."
              if [ -f "$HOME/.kubescape/bin/kubescape" ]; then
                echo "Kubescape is already installed, skipping installation"
              else
                echo "Installing dependencies for Containers Configuration Scan"
                cd /home/ubuntu/
                mkdir kubescape_results
                curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
                echo 'export PATH=$HOME/.kubescape/bin:$PATH' >> ~/.bashrc
                source ~/.bashrc
              fi
            displayName: 'Install Container Scanning dependencies'
          - script: |
              echo "Scanning YAML for application"
              export PATH=$HOME/.kubescape/bin:$PATH
              kubescape scan /home/ubuntu/WebGoat/webgoat_K8S.yml --format junit --output /home/ubuntu/kubescape_results/kubescape_static_scan.xml
              echo "Scanning completed."
            displayName: 'Run Kubescape Scan'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |  
                az storage blob upload --file /home/ubuntu/kubescape_results/kubescape_static_scan.xml --container-name $(ArtifactContainerName) --name securelinescanoutput/K8S_config_scan.xml --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Upload Kubescape Scan Results'       

  - stage: BuildAndPushDockerImage
    jobs:
      - job: BuildAndPushDockerImage
        steps:
          - script: |
              echo "Executing build commands"
              cd /home/ubuntu/WebGoat
              git checkout main
              sudo echo dckr_pat_n75Bge8xlnU_sJh8b3m6GgR_cg8 | sudo docker login --username gtyagi017 --password-stdin
              sudo ./mvnw clean install
              sudo docker build -f Dockerfile . -t webgoat/webgoat
              sudo docker tag webgoat/webgoat:latest gtyagi017/webgoat:latest
              sudo docker push gtyagi017/webgoat:latest
              sudo docker image prune -f
              echo "WebGoat Docker image pushed successfully on Docker Hub"
            displayName: 'Build and Push Docker Image' 

  - stage: TrivyMutipleScan
    dependsOn: BuildAndPushDockerImage
    jobs:
      - job: TrivyMutipleScan
        steps:
          - script: |
              echo "Checking if trivy is already installed..."
              if [ -f "$HOME/.local/bin/trivy" ]; then
                echo "trivy is already installed, skipping installation"
              else
                cd /home/ubuntu/
                mkdir trivy_outputs
                echo "Installing Trivy"
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/.local/bin v0.54.1
                echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc
                source ~/.bashrc
              fi  
            displayName: 'Install Trivy'
          - script: |
              export PATH=$HOME/.local/bin:$PATH
              echo "Scanning DockerFile"
              cd /home/ubuntu/
              trivy config /home/ubuntu/WebGoat/Dockerfile --format json -o /home/ubuntu/trivy_results/Trivy_Misconfig_result.json
              echo "Scanning completed."
            displayName: 'Trivy Dockerfile Container Misconfig Scan'

          - script: |
              export PATH=$HOME/.local/bin:$PATH
              echo "Scanning Docker image"
              cd /home/ubuntu/
              trivy image -f json -o /home/ubuntu/trivy_results/Trivy_result.json gtyagi017/webgoat:latest
              echo "Scanning completed."
            displayName: 'Run Trivy Container Scan'

          - script: |
              export PATH=$HOME/.local/bin:$PATH
              echo "Trivy CIS Compliance Scan for docker images"
              cd /home/ubuntu/
              trivy image --compliance=docker-cis-1.6.0 gtyagi017/webgoat:latest -f json -o /home/ubuntu/trivy_results/Trivy_CIS_result.json
              echo "Scanning completed."
            displayName: 'Trivy CIS Compliance Scan'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: | 
                az storage blob upload --file /home/ubuntu/trivy_results/Trivy_Misconfig_result.json --container-name $(ArtifactContainerName) --name securelinescanoutput/Trivy_result.json --account-name $(ArtifactStorageAccount) --overwrite
                az storage blob upload --file /home/ubuntu/trivy_results/Trivy_result.json --container-name $(ArtifactContainerName) --name securelinescanoutput/Trivy_result.json --account-name $(ArtifactStorageAccount) --overwrite 
                az storage blob upload --file /home/ubuntu/trivy_results/Trivy_CIS_result.json --container-name $(ArtifactContainerName) --name securelinescanoutput/Trivy_result.json --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Upload Trivy Scan Results'

  - stage: DeployApplication
    dependsOn: TrivyMutipleScan
    jobs:
      - job: Deploy
        steps:
          - script: |
              echo "Deploying Application on Kubernetes"
              kubectl apply -f /home/ubuntu/WebGoat/webgoat_K8S.yml
              echo "Deployment completed."
            displayName: 'Deploy Application' 
      
  - stage: DynamicApplicationSecurityTesting
    dependsOn: DeployApplication
    jobs:
      - job: DynamicApplicationSecurityTesting
        steps:
          - script: |
              echo "Running ZAP docker container and scanning full Scan"
              mkdir /home/ubuntu/zapmount
              chmod -R 777 /home/ubuntu/zapmount
              sudo docker run --rm -v /home/ubuntu/zapmount:/zap/wrk/:rw -t softwaresecurityproject/zap-stable zap-full-scan.py -t http://$(DefectDojoDomain):30002/WebGoat -x /zap/wrk/zap_report.xml || true
              echo "Scanning completed."
            displayName: 'Run ZAP Scan'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload --file /home/ubuntu/zapmount/zap_report.xml --container-name $(ArtifactContainerName) --name securelinescanoutput/zap_report --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Upload ZAP Scan Results'

          - script: |
              echo "Sending zap report to DefectDojo"
              curl -X POST "http://$(DefectDojoDomain):30001/api/v2/import-scan/" \
              -H "accept: application/json" \
              -H "Authorization: Token $(defectdojotoken)" \
              -H "Content-Type: multipart/form-data" \
              -F "active=true" \
              -F "verified=true" \
              -F "close_old_findings=false" \
              -F "test_title=Secureline" \
              -F "push_to_jira=false" \
              -F "minimum_severity=Info" \
              -F "close_old_findings_product_scope=false" \
              -F "scan_date=$(date +%F)" \
              -F "create_finding_groups_for_all_findings=true" \
              -F "product_name=Secureline" \
              -F "tags=zap_report" \
              -F "scan_type=ZAP Scan" \
              -F "file=@$(pwd)/zapmount/zap_report" \
              -F "engagement=1"
              if [ $? -eq 0 ]; then echo -e "\nReport sent successfully"; else echo -e "\nFailed to send report"; fi
            displayName: 'Send SonarQube Results to DefectDojo' 

  - stage: KubescapeDynamicScan
    jobs:
      - job: KubescapeDynamicScan
        steps:
          - script: |
              echo "Checking if Kubescape is already installed..."
              if [ -f "$HOME/.kubescape/bin/kubescape" ]; then
                echo "Kubescape is already installed, skipping installation"
              else
                echo "Installing dependencies for Containers Configuration Scan"
                cd /home/ubuntu/
                curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
                echo 'export PATH=$HOME/.kubescape/bin:$PATH' >> ~/.bashrc
                source ~/.bashrc
              fi
            displayName: 'Install Container Scanning dependencies'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "kubescape scanning application namespace"
                export PATH=$PATH:$HOME/.kubescape/bin
                kubescape scan --include-namespaces webgoat-namespace --format junit --output /home/ubuntu/kubescape_results/k8s_dynamic_scan.xml
                echo "Uploading Kubescape scan results to Azure Blob Storage"
                az storage blob upload --file /home/ubuntu/kubescape_results/k8s_dynamic_scan.xml --container-name $(ArtifactContainerName) --name securelinescanoutput/k8s_namespace_scan.xml --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Run Container Scan and upload results'

  - stage: CloudScan
    jobs:
      - job: CloudScan
        steps:
          - script: |
              echo "Installing dependencies for Cloud Scan"
              if [ -f "$HOME/.local/bin/prowler" ]; then
                echo "prowler is already installed, skipping installation"
                pipx upgrade prowler
              else
                echo "Installing dependencies for Containers Configuration Scan"
                sudo apt-get install -y pipx
                pipx install prowler
                prowler -v  
                echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc
                source ~/.bashrc
              fi
            displayName: 'Install dependencies'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Starting cloud scan"
                export PATH=$HOME/.local/bin:$PATH
                cd /home/ubuntu/
                rm -rf /home/ubuntu/output/
                export AZURE_CLIENT_ID=$(clientid)
                export AZURE_CLIENT_SECRET=$(clientsecret)
                export AZURE_TENANT_ID=$(tenantid)
                prowler azure --sp-env-auth 
                # Check if compliance directory exists
                if [ -d "/home/ubuntu/output/compliance/" ] && [ "$(ls -A /home/ubuntu/output/compliance/)" ]; then
                    # Navigate to the compliance directory
                    cd /home/ubuntu/output/

                    # Rename all files to remove the unique ID
                    for file in prowler-output-*-*-*-*-*_*.csv; do
                        # Use parameter expansion to remove the ID part
                        new_filename=$(echo "$file" | sed -E 's/prowler-output-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}-[0-9]{14}/prowler-output/')
                        
                        # Rename the file
                        mv "$file" "$new_filename"
                    done

                    # Upload all renamed files
                    az storage blob upload-batch \
                        --source /home/ubuntu/output/ \
                        --destination "$(ArtifactContainerName)/securelinescanoutput/cloudscan" \
                        --account-name "$(ArtifactStorageAccount)" \
                        --overwrite
                else
                    echo "No scan reports found"
                    exit 1
                fi
            displayName: 'Run Cloud Scan and upload results'                      

  - stage: CISScan
    jobs:
      - job: CISScan 
        steps:
          - script: |
              echo "Checking if CIS script is already installed..."
              if [ -d "/opt/UBUNTU22-CIS-Audit" ] && [ -f "/opt/UBUNTU22-CIS-Audit/run_audit.sh" ]; then
                echo "CIS script is already installed, skipping installation"
              else
                echo "Installing dependencies for Source Composition Analysis"
                sudo curl -L https://github.com/goss-org/goss/releases/latest/download/goss-linux-amd64 -o /usr/local/bin/goss
                sudo chmod +rx /usr/local/bin/goss
                echo 'export PATH=/usr/local/bin:$PATH' >> ~/.bashrc
                source ~/.bashrc
                cd /opt
                sudo rm -rf UBUNTU22-CIS-Audit
                wget https://github.com/iamgagantyagi/secureline/UBUNTU22-CIS-Audit.zip
                unzip -o UBUNTU22-CIS-Audit.zip
                sudo rm -rf UBUNTU22-CIS-Audit.zip
                chmod -R 775 UBUNTU22-CIS-Audit/run_audit.sh
              fi
            displayName: 'Install Source Composition Analysis dependencies'
          - script: |
              export PATH=/usr/local/bin:$PATH
              sudo rm -rf /opt/audit_securelinedemo-CIS-UBUNTU22*
              cd /opt/UBUNTU22-CIS-Audit
              sudo ./run_audit.sh
              echo "Scanning completed."
            displayName: 'Run Dependency Check'  
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                IP_ADDRESS=$(hostname -I | awk '{print $1}')
                OUTPUT_FILENAME="cis_audit_${IP_ADDRESS}_UBUNTU2204.json"

                # Find the latest audit file
                AUDIT_FILE=$(ls -t /opt/audit_securelinedemo-CIS-UBUNTU22_*.json | head -1)
                
                # Extract just the filename without the path
                #FILENAME=$(basename $AUDIT_FILE)

                # Copy to new filename format
                sudo cp "$AUDIT_FILE" "/opt/$OUTPUT_FILENAME"
                sudo rm -rf /opt/audit_securelinedemo*
                
                # Upload to Azure Blob Storage
                az storage blob upload \
                  --file "/opt/$OUTPUT_FILENAME" \
                  --container-name $(ArtifactContainerName) \
                  --name "securelinescanoutput/$OUTPUT_FILENAME" \
                  --account-name $(ArtifactStorageAccount) \
                  --overwrite
                
                echo "Uploaded $FILENAME to Azure Blob Storage"
            displayName: 'Upload CIS Scan Results'

  - stage: HostVulnerabilityAssessment
    jobs:
      - job: HostVulnerabilityAssessment
        steps:
          - script: |
              echo "Checking if OpenVAS is already running..."
              cd /home/ubuntu/
              if docker-compose ps --services --filter "status=running" | grep -q .; then
                echo "OpenVAS containers are already running, skipping installation"
              else
                max_attempts=3
                attempt=1
                while [ $attempt -le $max_attempts ]; do
                  echo "Starting OpenVAS (attempt $attempt/$max_attempts)..."
                  
                  # Use nohup to ensure the docker-compose command continues even if the shell exits
                  nohup docker-compose up -d > openvas_startup.log 2>&1
                  
                  # Check if docker-compose started successfully
                  if [ $? -eq 0 ]; then
                    # Check if containers are actually running
                    sleep 10
                    running_containers=$(docker-compose ps --services --filter "status=running" | wc -l)
                    
                    if [ $running_containers -gt 0 ]; then
                      echo "OpenVAS started successfully with $running_containers containers running"
                      
                      # Add error handling for the password setup
                      echo "Setting OpenVAS admin password"
                      if docker compose exec --user=gvmd gvmd gvmd --user=admin --new-password=Admin1234!; then
                        echo "Password set successfully"
                        break
                      else
                        echo "Failed to set password, but containers are running. Will retry..."
                      fi
                    else
                      echo "Docker-compose started but no containers are running"
                    fi
                  fi
                  
                  echo "Failed to start OpenVAS properly, retrying in 30 seconds..."
                  docker-compose down
                  sleep 30
                  attempt=$((attempt+1))
                done
                if [ $attempt -gt $max_attempts ]; then
                  echo "Warning: Failed to start OpenVAS properly after $max_attempts attempts"
                  echo "Continuing with installation. OpenVAS may need manual configuration later."
                else
                  echo "OpenVAS setup completed successfully"
                fi
              fi
            displayName: 'Install OpenVAS'
          - script: |
              echo "Installing dependencies for Host Vulnerability Assessment"
              TARGET_IP=$(ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
              DOCKER_CONTAINER_ID=$(sudo docker ps --filter "name=gvm-tools" --format "{{.ID}}")

              echo "Creating target..."
              # First check if target exists
              EXISTING_TARGETS=$(sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<get_targets/>")
              echo "Retrieved existing targets"
              
              # Extract target ID if it exists
              TARGET_ID=$(echo "$EXISTING_TARGETS" | xmlstarlet sel -t -m "//target[name='$(TARGET_NAME)']" -v "@id" -n)
              
              # If target doesn't exist, create it
              if [ -z "$TARGET_ID" ]; then
                echo "Target does not exist. Creating new target..."
                TARGET_RESPONSE=$(sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<create_target><name>$(TARGET_NAME)</name><hosts>$TARGET_IP</hosts><port_range>T:22,80,443,3306,8080</port_range></create_target>")
                echo "Target creation response: $TARGET_RESPONSE"
                
                # Extract the target ID from the response
                TARGET_ID=$(echo "$TARGET_RESPONSE" | xmlstarlet sel -t -m "//create_target_response" -v "@id" -n)
                
                if [ -z "$TARGET_ID" ]; then
                  echo "##vso[task.logissue type=error]Failed to create target or extract target ID. Response: $TARGET_RESPONSE"
                  exit 1
                fi
              fi
              
              echo "Target ID: $TARGET_ID"
              
              # Check for existing task with the same name
              EXISTING_TASKS=$(sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<get_tasks/>")
              echo "Retrieved existing tasks"
              
              # Extract task ID if it exists
              TASK_ID=$(echo "$EXISTING_TASKS" | xmlstarlet sel -t -m "//task[name='$(TASK_NAME)']" -v "@id" -n)
              
              # If task doesn't exist, create it
              if [ -z "$TASK_ID" ]; then
                echo "Creating new task..."
                # Default scanner ID for OpenVAS Scanner
                SCANNER_ID="08b69003-5fc2-4037-a479-93b440211c73"
                
                # Default config ID for Full and fast scan
                CONFIG_ID="daba56c8-73ec-11df-a475-002264764cea"
                
                TASK_RESPONSE=$(sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<create_task><name>$(TASK_NAME)</name><target id='$TARGET_ID'/><scanner id='$SCANNER_ID'/><config id='$CONFIG_ID'/></create_task>")
                echo "Task creation response: $TASK_RESPONSE"
                
                # Extract the task ID from the response
                TASK_ID=$(echo "$TASK_RESPONSE" | xmlstarlet sel -t -m "//create_task_response" -v "@id" -n)
                
                if [ -z "$TASK_ID" ]; then
                  echo "##vso[task.logissue type=error]Failed to create task or extract task ID. Response: $TASK_RESPONSE"
                  exit 1
                fi
              fi
              
              echo "Task ID: $TASK_ID"
              
              # Start the scan
              echo "Starting scan task..."
              START_RESPONSE=$(sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<start_task task_id='$TASK_ID'/>")
              echo "Start task response: $START_RESPONSE"
              
              if [[ "$START_RESPONSE" == *"status=\"202\""* ]]; then
                echo "Scan started successfully"
              else
                echo "##vso[task.logissue type=warning]Scan may not have started properly. Response: $START_RESPONSE"
                # Continue anyway as the task might still be running
              fi 
              # Monitor scan with simplified polling
              SCAN_TIMEOUT=1200
              TIMEOUT=$(( $(date +%s) + $SCAN_TIMEOUT ))
              while [ $(date +%s) -lt $TIMEOUT ]; do
                SCAN_STATUS=$(sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<get_tasks task_id='$TASK_ID'/>")
                
                if [[ "$SCAN_STATUS" == *"<status>Done</status>"* ]]; then
                  REPORT_ID=$(echo "$SCAN_STATUS" | xmlstarlet sel -t -m "//report" -v "@id" -n)
                  echo "Scan completed. Report ID: $REPORT_ID"
                  break
                fi
                
                echo "Scan in progress... ($(( $TIMEOUT - $(date +%s) )) seconds remaining)"
                sleep 60
              done
              
              # Check if we timed out
              if [[ -z "$REPORT_ID" ]]; then
                echo "##vso[task.logissue type=error]Scan timed out"
                exit 1
              fi
              
              # Generate XML report instead of PDF
              echo "Generating XML vulnerability report..."
              mkdir -p /home/ubuntu/HostVA
              sudo docker exec -u gvm $DOCKER_CONTAINER_ID gvm-cli --gmp-username "$(GVM_USER)" --gmp-password "$(GVM_PASSWORD)" socket --xml "<get_reports report_id='$REPORT_ID' format_id='5057e5cc-b825-11e4-9d0e-28d24461215b' details='True' />" | \
              grep -oP '(?<=</report_format>)[^<]+' | base64 -d > /home/ubuntu/HostVA/CIS_Audit.xml
              
              # Check if report was generated
              if [ -f /home/ubuntu/HostVA/CIS_Audit.xml ]; then
                echo "XML report generated successfully"
              else
                echo "Report generation failed"
                exit 1
              fi

            displayName: 'Run Host Vulnerability Assessment'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az storage blob upload-batch --source /home/ubuntu/HostVA/ --destination $(ArtifactContainerName)/securelinescanoutput/HostVA --account-name $(ArtifactStorageAccount) --overwrite
            displayName: 'Host Vulnerability upload results'

  - stage: FinalResult
    dependsOn: HostVulnerabilityAssessment
    jobs:
      - job: FinalResult
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Installing dependencies for Final Result"
                sudo apt-get install python3-dateutil python3-html2text -y
                cd /home/ubuntu/
                rm -rf securelineparser/
                git clone https://github.com/iamgagantyagi/securelineparser.git
                az storage blob download-batch --source $(ArtifactContainerName) --destination /home/ubuntu/securelineparser/ --pattern "securelinescanoutput/*" --account-name $(ArtifactStorageAccount)
            displayName: 'Install dependencies and download artifacts'
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'secureline'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |  
                cd /home/ubuntu/securelineparser
                sudo chmod -R 755 /home/ubuntu/securelineparser/setup_postgres_parser.sh
                sudo ./setup_postgres_parser.sh
                python3 run_parser.py -t "Trufflehog3 Scan" -p "securelinescanoutput/truffelhog_output.json" 
                python3 run_parser.py -t "Dependency Check Scan" -p "securelinescanoutput/dependency-check-report.xml" 
                python3 run_parser.py -t "sonarqube" -u "http://$(DefectDojoDomain):30000" -k securityproject -b main -a "$Sonarqubeusertoken" 
                python3 run_parser.py -t "TrivyMisconfig" -p "securelinescanoutput/Trivy_Misconfig_result.json"
                python3 run_parser.py -t "Trivy scan" -p "securelinescanoutput/Trivy_result.json" 
                python3 run_parser.py -t "Trivy CIS scan" -p "securelinescanoutput/Trivy_CIS_result.json"
                python3 run_parser.py -t "Kubescape Scanning_CI" -p "securelinescanoutput/K8S_config_scan.xml" 
                python3 run_parser.py -t "ZAP Scan" -p "securelinescanoutput/zap_report" 
                python3 run_parser.py -t "Kubescape Scanning_CD" -p "securelinescanoutput/k8s_namespace_scan.xml" 
                
                CIS_FILE=$(ls -t securelinescanoutput/cis_audit*.json 2>/dev/null | head -1)
                if [ -z "$CIS_FILE" ]; then
                  echo "No matching audit file found!"
                  exit 1
                fi
                echo "Found audit file: $CIS_FILE"
                python3 run_parser.py -t "UBUNTU20-CIS-Audit" -p "$CIS_FILE"
                python3 run_parser.py -t "Azure Cloud Security Suite" -p "securelinescanoutput/cloudscan/prowler-output.ocsf.json" 
                python3 run_parser.py -t "Host Vulnerability Assessment" -p "securelinescanoutput/HostVA/CIS_Audit.xml"
                cd ../
                az storage blob upload --file /home/ubuntu/securelineparser/output_files/latest_report/consolidated_test_output.csv --container-name $(ArtifactContainerName) --name securelinescanoutput/consolidated_test_output.csv --account-name $(ArtifactStorageAccount) --overwrite   
                TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
                # List all blobs under 'securelinescanoutput/' and handle nested structures correctly
                az storage blob list --container-name $(ArtifactContainerName) --account-name $(ArtifactStorageAccount) --query "[].name" -o tsv | grep '^securelinescanoutput/' | while read -r BLOB_NAME; do
                  # Normalize blob path to remove extra slashes (fixes nested files issue)
                  CLEAN_BLOB_NAME=$(echo "$BLOB_NAME" | sed 's|//|/|g')

                  # Construct new blob name with timestamped folder
                  NEW_BLOB_NAME=$(echo "$CLEAN_BLOB_NAME" | sed "s|^securelinescanoutput/|securelinescanoutput-$TIMESTAMP/|")

                  echo "Copying $CLEAN_BLOB_NAME to $NEW_BLOB_NAME"

                  # Copy each blob to the new timestamped location
                  az storage blob copy start --destination-container $(ArtifactContainerName) --destination-blob "$NEW_BLOB_NAME" --source-container $(ArtifactContainerName) --source-blob "$CLEAN_BLOB_NAME" --account-name $(ArtifactStorageAccount)
                done

                # Wait for copy operations to complete (increase sleep time if needed)
                sleep 20
                echo "Deleting old blobs under securelinescanoutput/"
                az storage blob list --container-name $(ArtifactContainerName) --account-name $(ArtifactStorageAccount) --query "[].name" -o tsv | grep '^securelinescanoutput/' | while read -r OLD_BLOB; do
                  az storage blob delete --container-name $(ArtifactContainerName) --name "$OLD_BLOB" --account-name $(ArtifactStorageAccount)
                done

                echo "Blob copy completed. Old files deleted successfully."
            displayName: 'Run Final Result Parser and upload results'